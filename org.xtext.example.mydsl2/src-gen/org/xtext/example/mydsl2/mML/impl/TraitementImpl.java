/**
 * generated by Xtext 2.16.0
 */
package org.xtext.example.mydsl2.mML.impl;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

import org.xtext.example.mydsl2.mML.Algorithm;
import org.xtext.example.mydsl2.mML.MMLPackage;
import org.xtext.example.mydsl2.mML.StratEval;
import org.xtext.example.mydsl2.mML.Traitement;
import org.xtext.example.mydsl2.mML.Variable;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Traitement</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.xtext.example.mydsl2.mML.impl.TraitementImpl#getChemin <em>Chemin</em>}</li>
 *   <li>{@link org.xtext.example.mydsl2.mML.impl.TraitementImpl#getEval <em>Eval</em>}</li>
 *   <li>{@link org.xtext.example.mydsl2.mML.impl.TraitementImpl#getAlgo <em>Algo</em>}</li>
 *   <li>{@link org.xtext.example.mydsl2.mML.impl.TraitementImpl#getName <em>Name</em>}</li>
 *   <li>{@link org.xtext.example.mydsl2.mML.impl.TraitementImpl#getNames <em>Names</em>}</li>
 * </ul>
 *
 * @generated
 */
public class TraitementImpl extends MinimalEObjectImpl.Container implements Traitement
{
  /**
   * The default value of the '{@link #getChemin() <em>Chemin</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getChemin()
   * @generated
   * @ordered
   */
  protected static final String CHEMIN_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getChemin() <em>Chemin</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getChemin()
   * @generated
   * @ordered
   */
  protected String chemin = CHEMIN_EDEFAULT;

  /**
   * The cached value of the '{@link #getEval() <em>Eval</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getEval()
   * @generated
   * @ordered
   */
  protected StratEval eval;

  /**
   * The cached value of the '{@link #getAlgo() <em>Algo</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getAlgo()
   * @generated
   * @ordered
   */
  protected Algorithm algo;

  /**
   * The cached value of the '{@link #getName() <em>Name</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getName()
   * @generated
   * @ordered
   */
  protected Variable name;

  /**
   * The cached value of the '{@link #getNames() <em>Names</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getNames()
   * @generated
   * @ordered
   */
  protected EList<Variable> names;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected TraitementImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return MMLPackage.Literals.TRAITEMENT;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String getChemin()
  {
    return chemin;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setChemin(String newChemin)
  {
    String oldChemin = chemin;
    chemin = newChemin;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MMLPackage.TRAITEMENT__CHEMIN, oldChemin, chemin));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public StratEval getEval()
  {
    return eval;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetEval(StratEval newEval, NotificationChain msgs)
  {
    StratEval oldEval = eval;
    eval = newEval;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, MMLPackage.TRAITEMENT__EVAL, oldEval, newEval);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setEval(StratEval newEval)
  {
    if (newEval != eval)
    {
      NotificationChain msgs = null;
      if (eval != null)
        msgs = ((InternalEObject)eval).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - MMLPackage.TRAITEMENT__EVAL, null, msgs);
      if (newEval != null)
        msgs = ((InternalEObject)newEval).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - MMLPackage.TRAITEMENT__EVAL, null, msgs);
      msgs = basicSetEval(newEval, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MMLPackage.TRAITEMENT__EVAL, newEval, newEval));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Algorithm getAlgo()
  {
    return algo;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetAlgo(Algorithm newAlgo, NotificationChain msgs)
  {
    Algorithm oldAlgo = algo;
    algo = newAlgo;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, MMLPackage.TRAITEMENT__ALGO, oldAlgo, newAlgo);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setAlgo(Algorithm newAlgo)
  {
    if (newAlgo != algo)
    {
      NotificationChain msgs = null;
      if (algo != null)
        msgs = ((InternalEObject)algo).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - MMLPackage.TRAITEMENT__ALGO, null, msgs);
      if (newAlgo != null)
        msgs = ((InternalEObject)newAlgo).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - MMLPackage.TRAITEMENT__ALGO, null, msgs);
      msgs = basicSetAlgo(newAlgo, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MMLPackage.TRAITEMENT__ALGO, newAlgo, newAlgo));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Variable getName()
  {
    return name;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetName(Variable newName, NotificationChain msgs)
  {
    Variable oldName = name;
    name = newName;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, MMLPackage.TRAITEMENT__NAME, oldName, newName);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setName(Variable newName)
  {
    if (newName != name)
    {
      NotificationChain msgs = null;
      if (name != null)
        msgs = ((InternalEObject)name).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - MMLPackage.TRAITEMENT__NAME, null, msgs);
      if (newName != null)
        msgs = ((InternalEObject)newName).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - MMLPackage.TRAITEMENT__NAME, null, msgs);
      msgs = basicSetName(newName, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MMLPackage.TRAITEMENT__NAME, newName, newName));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<Variable> getNames()
  {
    if (names == null)
    {
      names = new EObjectContainmentEList<Variable>(Variable.class, this, MMLPackage.TRAITEMENT__NAMES);
    }
    return names;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case MMLPackage.TRAITEMENT__EVAL:
        return basicSetEval(null, msgs);
      case MMLPackage.TRAITEMENT__ALGO:
        return basicSetAlgo(null, msgs);
      case MMLPackage.TRAITEMENT__NAME:
        return basicSetName(null, msgs);
      case MMLPackage.TRAITEMENT__NAMES:
        return ((InternalEList<?>)getNames()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case MMLPackage.TRAITEMENT__CHEMIN:
        return getChemin();
      case MMLPackage.TRAITEMENT__EVAL:
        return getEval();
      case MMLPackage.TRAITEMENT__ALGO:
        return getAlgo();
      case MMLPackage.TRAITEMENT__NAME:
        return getName();
      case MMLPackage.TRAITEMENT__NAMES:
        return getNames();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case MMLPackage.TRAITEMENT__CHEMIN:
        setChemin((String)newValue);
        return;
      case MMLPackage.TRAITEMENT__EVAL:
        setEval((StratEval)newValue);
        return;
      case MMLPackage.TRAITEMENT__ALGO:
        setAlgo((Algorithm)newValue);
        return;
      case MMLPackage.TRAITEMENT__NAME:
        setName((Variable)newValue);
        return;
      case MMLPackage.TRAITEMENT__NAMES:
        getNames().clear();
        getNames().addAll((Collection<? extends Variable>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case MMLPackage.TRAITEMENT__CHEMIN:
        setChemin(CHEMIN_EDEFAULT);
        return;
      case MMLPackage.TRAITEMENT__EVAL:
        setEval((StratEval)null);
        return;
      case MMLPackage.TRAITEMENT__ALGO:
        setAlgo((Algorithm)null);
        return;
      case MMLPackage.TRAITEMENT__NAME:
        setName((Variable)null);
        return;
      case MMLPackage.TRAITEMENT__NAMES:
        getNames().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case MMLPackage.TRAITEMENT__CHEMIN:
        return CHEMIN_EDEFAULT == null ? chemin != null : !CHEMIN_EDEFAULT.equals(chemin);
      case MMLPackage.TRAITEMENT__EVAL:
        return eval != null;
      case MMLPackage.TRAITEMENT__ALGO:
        return algo != null;
      case MMLPackage.TRAITEMENT__NAME:
        return name != null;
      case MMLPackage.TRAITEMENT__NAMES:
        return names != null && !names.isEmpty();
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuffer result = new StringBuffer(super.toString());
    result.append(" (chemin: ");
    result.append(chemin);
    result.append(')');
    return result.toString();
  }

} //TraitementImpl
