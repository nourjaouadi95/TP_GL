/**
 * generated by Xtext 2.16.0
 */
package org.xtext.example.mydsl2.mML.impl;

import org.eclipse.emf.ecore.EAttribute;
import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EEnum;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.emf.ecore.EReference;

import org.eclipse.emf.ecore.impl.EPackageImpl;

import org.xtext.example.mydsl2.mML.Algorithm;
import org.xtext.example.mydsl2.mML.CrossValidation;
import org.xtext.example.mydsl2.mML.Lang;
import org.xtext.example.mydsl2.mML.MMLFactory;
import org.xtext.example.mydsl2.mML.MMLPackage;
import org.xtext.example.mydsl2.mML.SVMKernel;
import org.xtext.example.mydsl2.mML.SVMType;
import org.xtext.example.mydsl2.mML.StratEval;
import org.xtext.example.mydsl2.mML.TrainingTest;
import org.xtext.example.mydsl2.mML.Traitement;
import org.xtext.example.mydsl2.mML.Tree;
import org.xtext.example.mydsl2.mML.Treetype;
import org.xtext.example.mydsl2.mML.Variable;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model <b>Package</b>.
 * <!-- end-user-doc -->
 * @generated
 */
public class MMLPackageImpl extends EPackageImpl implements MMLPackage
{
  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass traitementEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass variableEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass algorithmEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass stratEvalEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass crossValidationEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass trainingTestEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass svmEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass treeEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EEnum langEEnum = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EEnum svmKernelEEnum = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EEnum svmTypeEEnum = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EEnum treetypeEEnum = null;

  /**
   * Creates an instance of the model <b>Package</b>, registered with
   * {@link org.eclipse.emf.ecore.EPackage.Registry EPackage.Registry} by the package
   * package URI value.
   * <p>Note: the correct way to create the package is via the static
   * factory method {@link #init init()}, which also performs
   * initialization of the package, or returns the registered package,
   * if one already exists.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see org.eclipse.emf.ecore.EPackage.Registry
   * @see org.xtext.example.mydsl2.mML.MMLPackage#eNS_URI
   * @see #init()
   * @generated
   */
  private MMLPackageImpl()
  {
    super(eNS_URI, MMLFactory.eINSTANCE);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private static boolean isInited = false;

  /**
   * Creates, registers, and initializes the <b>Package</b> for this model, and for any others upon which it depends.
   * 
   * <p>This method is used to initialize {@link MMLPackage#eINSTANCE} when that field is accessed.
   * Clients should not invoke it directly. Instead, they should simply access that field to obtain the package.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #eNS_URI
   * @see #createPackageContents()
   * @see #initializePackageContents()
   * @generated
   */
  public static MMLPackage init()
  {
    if (isInited) return (MMLPackage)EPackage.Registry.INSTANCE.getEPackage(MMLPackage.eNS_URI);

    // Obtain or create and register package
    MMLPackageImpl theMMLPackage = (MMLPackageImpl)(EPackage.Registry.INSTANCE.get(eNS_URI) instanceof MMLPackageImpl ? EPackage.Registry.INSTANCE.get(eNS_URI) : new MMLPackageImpl());

    isInited = true;

    // Create package meta-data objects
    theMMLPackage.createPackageContents();

    // Initialize created meta-data
    theMMLPackage.initializePackageContents();

    // Mark meta-data to indicate it can't be changed
    theMMLPackage.freeze();

  
    // Update the registry and return the package
    EPackage.Registry.INSTANCE.put(MMLPackage.eNS_URI, theMMLPackage);
    return theMMLPackage;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getTraitement()
  {
    return traitementEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EAttribute getTraitement_Chemin()
  {
    return (EAttribute)traitementEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getTraitement_Eval()
  {
    return (EReference)traitementEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getTraitement_Algo()
  {
    return (EReference)traitementEClass.getEStructuralFeatures().get(2);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getTraitement_Name()
  {
    return (EReference)traitementEClass.getEStructuralFeatures().get(3);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getTraitement_Names()
  {
    return (EReference)traitementEClass.getEStructuralFeatures().get(4);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getVariable()
  {
    return variableEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EAttribute getVariable_Name()
  {
    return (EAttribute)variableEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getAlgorithm()
  {
    return algorithmEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EAttribute getAlgorithm_Lang()
  {
    return (EAttribute)algorithmEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getAlgorithm_Name()
  {
    return (EReference)algorithmEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getStratEval()
  {
    return stratEvalEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getStratEval_Name()
  {
    return (EReference)stratEvalEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getCrossValidation()
  {
    return crossValidationEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EAttribute getCrossValidation_Number()
  {
    return (EAttribute)crossValidationEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getTrainingTest()
  {
    return trainingTestEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EAttribute getTrainingTest_Number()
  {
    return (EAttribute)trainingTestEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getSVM()
  {
    return svmEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EAttribute getSVM_Type()
  {
    return (EAttribute)svmEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EAttribute getSVM_Name()
  {
    return (EAttribute)svmEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getTree()
  {
    return treeEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EAttribute getTree_Type()
  {
    return (EAttribute)treeEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EEnum getLang()
  {
    return langEEnum;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EEnum getSVMKernel()
  {
    return svmKernelEEnum;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EEnum getSVMType()
  {
    return svmTypeEEnum;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EEnum getTreetype()
  {
    return treetypeEEnum;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public MMLFactory getMMLFactory()
  {
    return (MMLFactory)getEFactoryInstance();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private boolean isCreated = false;

  /**
   * Creates the meta-model objects for the package.  This method is
   * guarded to have no affect on any invocation but its first.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void createPackageContents()
  {
    if (isCreated) return;
    isCreated = true;

    // Create classes and their features
    traitementEClass = createEClass(TRAITEMENT);
    createEAttribute(traitementEClass, TRAITEMENT__CHEMIN);
    createEReference(traitementEClass, TRAITEMENT__EVAL);
    createEReference(traitementEClass, TRAITEMENT__ALGO);
    createEReference(traitementEClass, TRAITEMENT__NAME);
    createEReference(traitementEClass, TRAITEMENT__NAMES);

    variableEClass = createEClass(VARIABLE);
    createEAttribute(variableEClass, VARIABLE__NAME);

    algorithmEClass = createEClass(ALGORITHM);
    createEAttribute(algorithmEClass, ALGORITHM__LANG);
    createEReference(algorithmEClass, ALGORITHM__NAME);

    stratEvalEClass = createEClass(STRAT_EVAL);
    createEReference(stratEvalEClass, STRAT_EVAL__NAME);

    crossValidationEClass = createEClass(CROSS_VALIDATION);
    createEAttribute(crossValidationEClass, CROSS_VALIDATION__NUMBER);

    trainingTestEClass = createEClass(TRAINING_TEST);
    createEAttribute(trainingTestEClass, TRAINING_TEST__NUMBER);

    svmEClass = createEClass(SVM);
    createEAttribute(svmEClass, SVM__TYPE);
    createEAttribute(svmEClass, SVM__NAME);

    treeEClass = createEClass(TREE);
    createEAttribute(treeEClass, TREE__TYPE);

    // Create enums
    langEEnum = createEEnum(LANG);
    svmKernelEEnum = createEEnum(SVM_KERNEL);
    svmTypeEEnum = createEEnum(SVM_TYPE);
    treetypeEEnum = createEEnum(TREETYPE);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private boolean isInitialized = false;

  /**
   * Complete the initialization of the package and its meta-model.  This
   * method is guarded to have no affect on any invocation but its first.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void initializePackageContents()
  {
    if (isInitialized) return;
    isInitialized = true;

    // Initialize package
    setName(eNAME);
    setNsPrefix(eNS_PREFIX);
    setNsURI(eNS_URI);

    // Create type parameters

    // Set bounds for type parameters

    // Add supertypes to classes
    trainingTestEClass.getESuperTypes().add(this.getStratEval());

    // Initialize classes and features; add operations and parameters
    initEClass(traitementEClass, Traitement.class, "Traitement", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getTraitement_Chemin(), ecorePackage.getEString(), "chemin", null, 0, 1, Traitement.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getTraitement_Eval(), this.getStratEval(), null, "eval", null, 0, 1, Traitement.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getTraitement_Algo(), this.getAlgorithm(), null, "algo", null, 0, 1, Traitement.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getTraitement_Name(), this.getVariable(), null, "name", null, 0, 1, Traitement.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getTraitement_Names(), this.getVariable(), null, "names", null, 0, -1, Traitement.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(variableEClass, Variable.class, "Variable", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getVariable_Name(), ecorePackage.getEInt(), "name", null, 0, 1, Variable.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(algorithmEClass, Algorithm.class, "Algorithm", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getAlgorithm_Lang(), this.getLang(), "lang", null, 0, 1, Algorithm.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getAlgorithm_Name(), ecorePackage.getEObject(), null, "name", null, 0, 1, Algorithm.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(stratEvalEClass, StratEval.class, "StratEval", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getStratEval_Name(), this.getCrossValidation(), null, "name", null, 0, 1, StratEval.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(crossValidationEClass, CrossValidation.class, "CrossValidation", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getCrossValidation_Number(), ecorePackage.getEInt(), "number", null, 0, 1, CrossValidation.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(trainingTestEClass, TrainingTest.class, "TrainingTest", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getTrainingTest_Number(), ecorePackage.getEInt(), "number", null, 0, 1, TrainingTest.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(svmEClass, org.xtext.example.mydsl2.mML.SVM.class, "SVM", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getSVM_Type(), this.getSVMKernel(), "type", null, 0, 1, org.xtext.example.mydsl2.mML.SVM.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getSVM_Name(), this.getSVMType(), "name", null, 0, 1, org.xtext.example.mydsl2.mML.SVM.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(treeEClass, Tree.class, "Tree", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getTree_Type(), this.getTreetype(), "type", null, 0, 1, Tree.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    // Initialize enums and add enum literals
    initEEnum(langEEnum, Lang.class, "Lang");
    addEEnumLiteral(langEEnum, Lang.PYTHON);
    addEEnumLiteral(langEEnum, Lang.R);

    initEEnum(svmKernelEEnum, SVMKernel.class, "SVMKernel");
    addEEnumLiteral(svmKernelEEnum, SVMKernel.LINEAR);
    addEEnumLiteral(svmKernelEEnum, SVMKernel.POLY);
    addEEnumLiteral(svmKernelEEnum, SVMKernel.RADIAL);

    initEEnum(svmTypeEEnum, SVMType.class, "SVMType");
    addEEnumLiteral(svmTypeEEnum, SVMType.CCLASS);
    addEEnumLiteral(svmTypeEEnum, SVMType.NU_CLASS);
    addEEnumLiteral(svmTypeEEnum, SVMType.ONE_CLASS);

    initEEnum(treetypeEEnum, Treetype.class, "Treetype");
    addEEnumLiteral(treetypeEEnum, Treetype.CLASS);
    addEEnumLiteral(treetypeEEnum, Treetype.ANOVA);

    // Create resource
    createResource(eNS_URI);
  }

} //MMLPackageImpl
