/**
 * generated by Xtext 2.16.0
 */
package org.xtext.example.mydsl2.mML.impl;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EDataType;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.impl.EFactoryImpl;

import org.eclipse.emf.ecore.plugin.EcorePlugin;

import org.xtext.example.mydsl2.mML.*;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model <b>Factory</b>.
 * <!-- end-user-doc -->
 * @generated
 */
public class MMLFactoryImpl extends EFactoryImpl implements MMLFactory
{
  /**
   * Creates the default factory implementation.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public static MMLFactory init()
  {
    try
    {
      MMLFactory theMMLFactory = (MMLFactory)EPackage.Registry.INSTANCE.getEFactory(MMLPackage.eNS_URI);
      if (theMMLFactory != null)
      {
        return theMMLFactory;
      }
    }
    catch (Exception exception)
    {
      EcorePlugin.INSTANCE.log(exception);
    }
    return new MMLFactoryImpl();
  }

  /**
   * Creates an instance of the factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public MMLFactoryImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EObject create(EClass eClass)
  {
    switch (eClass.getClassifierID())
    {
      case MMLPackage.TRAITEMENT: return createTraitement();
      case MMLPackage.VARIABLE: return createVariable();
      case MMLPackage.ALGORITHM: return createAlgorithm();
      case MMLPackage.STRAT_EVAL: return createStratEval();
      case MMLPackage.CROSS_VALIDATION: return createCrossValidation();
      case MMLPackage.TRAINING_TEST: return createTrainingTest();
      case MMLPackage.SVM: return createSVM();
      case MMLPackage.TREE: return createTree();
      default:
        throw new IllegalArgumentException("The class '" + eClass.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object createFromString(EDataType eDataType, String initialValue)
  {
    switch (eDataType.getClassifierID())
    {
      case MMLPackage.LANG:
        return createLangFromString(eDataType, initialValue);
      case MMLPackage.SVM_KERNEL:
        return createSVMKernelFromString(eDataType, initialValue);
      case MMLPackage.SVM_TYPE:
        return createSVMTypeFromString(eDataType, initialValue);
      case MMLPackage.TREETYPE:
        return createTreetypeFromString(eDataType, initialValue);
      default:
        throw new IllegalArgumentException("The datatype '" + eDataType.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String convertToString(EDataType eDataType, Object instanceValue)
  {
    switch (eDataType.getClassifierID())
    {
      case MMLPackage.LANG:
        return convertLangToString(eDataType, instanceValue);
      case MMLPackage.SVM_KERNEL:
        return convertSVMKernelToString(eDataType, instanceValue);
      case MMLPackage.SVM_TYPE:
        return convertSVMTypeToString(eDataType, instanceValue);
      case MMLPackage.TREETYPE:
        return convertTreetypeToString(eDataType, instanceValue);
      default:
        throw new IllegalArgumentException("The datatype '" + eDataType.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Traitement createTraitement()
  {
    TraitementImpl traitement = new TraitementImpl();
    return traitement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Variable createVariable()
  {
    VariableImpl variable = new VariableImpl();
    return variable;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Algorithm createAlgorithm()
  {
    AlgorithmImpl algorithm = new AlgorithmImpl();
    return algorithm;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public StratEval createStratEval()
  {
    StratEvalImpl stratEval = new StratEvalImpl();
    return stratEval;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public CrossValidation createCrossValidation()
  {
    CrossValidationImpl crossValidation = new CrossValidationImpl();
    return crossValidation;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public TrainingTest createTrainingTest()
  {
    TrainingTestImpl trainingTest = new TrainingTestImpl();
    return trainingTest;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public SVM createSVM()
  {
    SVMImpl svm = new SVMImpl();
    return svm;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Tree createTree()
  {
    TreeImpl tree = new TreeImpl();
    return tree;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Lang createLangFromString(EDataType eDataType, String initialValue)
  {
    Lang result = Lang.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertLangToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public SVMKernel createSVMKernelFromString(EDataType eDataType, String initialValue)
  {
    SVMKernel result = SVMKernel.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertSVMKernelToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public SVMType createSVMTypeFromString(EDataType eDataType, String initialValue)
  {
    SVMType result = SVMType.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertSVMTypeToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Treetype createTreetypeFromString(EDataType eDataType, String initialValue)
  {
    Treetype result = Treetype.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertTreetypeToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public MMLPackage getMMLPackage()
  {
    return (MMLPackage)getEPackage();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @deprecated
   * @generated
   */
  @Deprecated
  public static MMLPackage getPackage()
  {
    return MMLPackage.eINSTANCE;
  }

} //MMLFactoryImpl
