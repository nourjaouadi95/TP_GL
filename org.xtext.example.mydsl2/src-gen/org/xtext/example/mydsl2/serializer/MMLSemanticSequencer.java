/*
 * generated by Xtext 2.16.0
 */
package org.xtext.example.mydsl2.serializer;

import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;
import org.xtext.example.mydsl2.mML.Algorithm;
import org.xtext.example.mydsl2.mML.CrossValidation;
import org.xtext.example.mydsl2.mML.MMLPackage;
import org.xtext.example.mydsl2.mML.SVM;
import org.xtext.example.mydsl2.mML.StratEval;
import org.xtext.example.mydsl2.mML.TrainingTest;
import org.xtext.example.mydsl2.mML.Traitement;
import org.xtext.example.mydsl2.mML.Tree;
import org.xtext.example.mydsl2.mML.Variable;
import org.xtext.example.mydsl2.services.MMLGrammarAccess;

@SuppressWarnings("all")
public class MMLSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private MMLGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == MMLPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case MMLPackage.ALGORITHM:
				sequence_Algorithm(context, (Algorithm) semanticObject); 
				return; 
			case MMLPackage.CROSS_VALIDATION:
				sequence_CrossValidation(context, (CrossValidation) semanticObject); 
				return; 
			case MMLPackage.SVM:
				sequence_SVM(context, (SVM) semanticObject); 
				return; 
			case MMLPackage.STRAT_EVAL:
				sequence_StratEval(context, (StratEval) semanticObject); 
				return; 
			case MMLPackage.TRAINING_TEST:
				sequence_TrainingTest(context, (TrainingTest) semanticObject); 
				return; 
			case MMLPackage.TRAITEMENT:
				sequence_Traitement(context, (Traitement) semanticObject); 
				return; 
			case MMLPackage.TREE:
				sequence_Tree(context, (Tree) semanticObject); 
				return; 
			case MMLPackage.VARIABLE:
				sequence_Variable(context, (Variable) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     Algorithm returns Algorithm
	 *
	 * Constraint:
	 *     (lang=Lang (name=SVM | name=Tree))
	 */
	protected void sequence_Algorithm(ISerializationContext context, Algorithm semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     CrossValidation returns CrossValidation
	 *
	 * Constraint:
	 *     number=INT
	 */
	protected void sequence_CrossValidation(ISerializationContext context, CrossValidation semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MMLPackage.Literals.CROSS_VALIDATION__NUMBER) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MMLPackage.Literals.CROSS_VALIDATION__NUMBER));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getCrossValidationAccess().getNumberINTTerminalRuleCall_3_0(), semanticObject.getNumber());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     SVM returns SVM
	 *
	 * Constraint:
	 *     (type=SVMKernel name=SVMType?)
	 */
	protected void sequence_SVM(ISerializationContext context, SVM semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     StratEval returns StratEval
	 *
	 * Constraint:
	 *     name=CrossValidation
	 */
	protected void sequence_StratEval(ISerializationContext context, StratEval semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MMLPackage.Literals.STRAT_EVAL__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MMLPackage.Literals.STRAT_EVAL__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getStratEvalAccess().getNameCrossValidationParserRuleCall_0_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     StratEval returns TrainingTest
	 *     TrainingTest returns TrainingTest
	 *
	 * Constraint:
	 *     number=INT
	 */
	protected void sequence_TrainingTest(ISerializationContext context, TrainingTest semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MMLPackage.Literals.TRAINING_TEST__NUMBER) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MMLPackage.Literals.TRAINING_TEST__NUMBER));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getTrainingTestAccess().getNumberINTTerminalRuleCall_3_0(), semanticObject.getNumber());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Traitement returns Traitement
	 *
	 * Constraint:
	 *     (chemin=STRING eval=StratEval algo=Algorithm name=Variable? names+=Variable*)
	 */
	protected void sequence_Traitement(ISerializationContext context, Traitement semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Tree returns Tree
	 *
	 * Constraint:
	 *     type=Treetype
	 */
	protected void sequence_Tree(ISerializationContext context, Tree semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MMLPackage.Literals.TREE__TYPE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MMLPackage.Literals.TREE__TYPE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getTreeAccess().getTypeTreetypeEnumRuleCall_3_0(), semanticObject.getType());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Variable returns Variable
	 *
	 * Constraint:
	 *     name=INT
	 */
	protected void sequence_Variable(ISerializationContext context, Variable semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MMLPackage.Literals.VARIABLE__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MMLPackage.Literals.VARIABLE__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getVariableAccess().getNameINTTerminalRuleCall_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
}
