/*
 * generated by Xtext 2.16.0
 */
package org.xtext.example.mydsl2.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.EnumLiteralDeclaration;
import org.eclipse.xtext.EnumRule;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractEnumRuleElementFinder;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class MMLGrammarAccess extends AbstractGrammarElementFinder {
	
	public class TraitementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl2.MML.Traitement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFileKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cCheminAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cCheminSTRINGTerminalRuleCall_1_0 = (RuleCall)cCheminAssignment_1.eContents().get(0);
		private final Keyword cEvaluationKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cEvalAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cEvalStratEvalParserRuleCall_3_0 = (RuleCall)cEvalAssignment_3.eContents().get(0);
		private final Keyword cAlgorithmKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cAlgoAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cAlgoAlgorithmParserRuleCall_5_0 = (RuleCall)cAlgoAssignment_5.eContents().get(0);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cVarCibleKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Assignment cNameAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final RuleCall cNameVariableParserRuleCall_6_1_0 = (RuleCall)cNameAssignment_6_1.eContents().get(0);
		private final Group cGroup_7 = (Group)cGroup.eContents().get(7);
		private final Keyword cVarPredictivesKeyword_7_0 = (Keyword)cGroup_7.eContents().get(0);
		private final Assignment cNamesAssignment_7_1 = (Assignment)cGroup_7.eContents().get(1);
		private final RuleCall cNamesVariableParserRuleCall_7_1_0 = (RuleCall)cNamesAssignment_7_1.eContents().get(0);
		
		//Traitement:
		//	'file' chemin=STRING
		//	'evaluation' eval=StratEval
		//	'algorithm' algo=Algorithm ('varCible' name=Variable)? ('varPredictives' names+=Variable*)?;
		@Override public ParserRule getRule() { return rule; }
		
		//'file' chemin=STRING 'evaluation' eval=StratEval 'algorithm' algo=Algorithm ('varCible' name=Variable)?
		//('varPredictives' names+=Variable*)?
		public Group getGroup() { return cGroup; }
		
		//'file'
		public Keyword getFileKeyword_0() { return cFileKeyword_0; }
		
		//chemin=STRING
		public Assignment getCheminAssignment_1() { return cCheminAssignment_1; }
		
		//STRING
		public RuleCall getCheminSTRINGTerminalRuleCall_1_0() { return cCheminSTRINGTerminalRuleCall_1_0; }
		
		//'evaluation'
		public Keyword getEvaluationKeyword_2() { return cEvaluationKeyword_2; }
		
		//eval=StratEval
		public Assignment getEvalAssignment_3() { return cEvalAssignment_3; }
		
		//StratEval
		public RuleCall getEvalStratEvalParserRuleCall_3_0() { return cEvalStratEvalParserRuleCall_3_0; }
		
		//'algorithm'
		public Keyword getAlgorithmKeyword_4() { return cAlgorithmKeyword_4; }
		
		//algo=Algorithm
		public Assignment getAlgoAssignment_5() { return cAlgoAssignment_5; }
		
		//Algorithm
		public RuleCall getAlgoAlgorithmParserRuleCall_5_0() { return cAlgoAlgorithmParserRuleCall_5_0; }
		
		//('varCible' name=Variable)?
		public Group getGroup_6() { return cGroup_6; }
		
		//'varCible'
		public Keyword getVarCibleKeyword_6_0() { return cVarCibleKeyword_6_0; }
		
		//name=Variable
		public Assignment getNameAssignment_6_1() { return cNameAssignment_6_1; }
		
		//Variable
		public RuleCall getNameVariableParserRuleCall_6_1_0() { return cNameVariableParserRuleCall_6_1_0; }
		
		//('varPredictives' names+=Variable*)?
		public Group getGroup_7() { return cGroup_7; }
		
		//'varPredictives'
		public Keyword getVarPredictivesKeyword_7_0() { return cVarPredictivesKeyword_7_0; }
		
		//names+=Variable*
		public Assignment getNamesAssignment_7_1() { return cNamesAssignment_7_1; }
		
		//Variable
		public RuleCall getNamesVariableParserRuleCall_7_1_0() { return cNamesVariableParserRuleCall_7_1_0; }
	}
	public class VariableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl2.MML.Variable");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameINTTerminalRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//Variable:
		//	name=INT;
		@Override public ParserRule getRule() { return rule; }
		
		//// on peut red√©finir le nom des variables
		//name=INT
		public Assignment getNameAssignment() { return cNameAssignment; }
		
		//INT
		public RuleCall getNameINTTerminalRuleCall_0() { return cNameINTTerminalRuleCall_0; }
	}
	public class AlgorithmElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl2.MML.Algorithm");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLanguageAlgoKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cLangAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cLangLangEnumRuleCall_2_0 = (RuleCall)cLangAssignment_2.eContents().get(0);
		private final Keyword cNameAlgoKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cNameAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final Alternatives cNameAlternatives_4_0 = (Alternatives)cNameAssignment_4.eContents().get(0);
		private final RuleCall cNameSVMParserRuleCall_4_0_0 = (RuleCall)cNameAlternatives_4_0.eContents().get(0);
		private final RuleCall cNameTreeParserRuleCall_4_0_1 = (RuleCall)cNameAlternatives_4_0.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//Algorithm:
		//	'{'
		//	'languageAlgo' lang=Lang
		//	'nameAlgo' name=(SVM | Tree)
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'{' 'languageAlgo' lang=Lang 'nameAlgo' name=(SVM | Tree) '}'
		public Group getGroup() { return cGroup; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_0() { return cLeftCurlyBracketKeyword_0; }
		
		//'languageAlgo'
		public Keyword getLanguageAlgoKeyword_1() { return cLanguageAlgoKeyword_1; }
		
		//lang=Lang
		public Assignment getLangAssignment_2() { return cLangAssignment_2; }
		
		//Lang
		public RuleCall getLangLangEnumRuleCall_2_0() { return cLangLangEnumRuleCall_2_0; }
		
		//'nameAlgo'
		public Keyword getNameAlgoKeyword_3() { return cNameAlgoKeyword_3; }
		
		//name=(SVM | Tree)
		public Assignment getNameAssignment_4() { return cNameAssignment_4; }
		
		//(SVM | Tree)
		public Alternatives getNameAlternatives_4_0() { return cNameAlternatives_4_0; }
		
		//SVM
		public RuleCall getNameSVMParserRuleCall_4_0_0() { return cNameSVMParserRuleCall_4_0_0; }
		
		//Tree
		public RuleCall getNameTreeParserRuleCall_4_0_1() { return cNameTreeParserRuleCall_4_0_1; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}
	public class StratEvalElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl2.MML.StratEval");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cNameCrossValidationParserRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final RuleCall cTrainingTestParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//StratEval:
		//	name=CrossValidation | TrainingTest;
		@Override public ParserRule getRule() { return rule; }
		
		//name=CrossValidation | TrainingTest
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//name=CrossValidation
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//CrossValidation
		public RuleCall getNameCrossValidationParserRuleCall_0_0() { return cNameCrossValidationParserRuleCall_0_0; }
		
		//TrainingTest
		public RuleCall getTrainingTestParserRuleCall_1() { return cTrainingTestParserRuleCall_1; }
	}
	public class CrossValidationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl2.MML.CrossValidation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCrossValidationKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cNumRepetitionCrossKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cNumberAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNumberINTTerminalRuleCall_3_0 = (RuleCall)cNumberAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//CrossValidation:
		//	'CrossValidation' '{'
		//	'numRepetitionCross' number=INT
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'CrossValidation' '{' 'numRepetitionCross' number=INT '}'
		public Group getGroup() { return cGroup; }
		
		//'CrossValidation'
		public Keyword getCrossValidationKeyword_0() { return cCrossValidationKeyword_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//'numRepetitionCross'
		public Keyword getNumRepetitionCrossKeyword_2() { return cNumRepetitionCrossKeyword_2; }
		
		//number=INT
		public Assignment getNumberAssignment_3() { return cNumberAssignment_3; }
		
		//INT
		public RuleCall getNumberINTTerminalRuleCall_3_0() { return cNumberINTTerminalRuleCall_3_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class TrainingTestElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl2.MML.TrainingTest");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTrainingTestKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cPourcentageTrainingKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cNumberAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNumberINTTerminalRuleCall_3_0 = (RuleCall)cNumberAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//TrainingTest:
		//	'TrainingTest' '{'
		//	'pourcentageTraining' number=INT
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'TrainingTest' '{' 'pourcentageTraining' number=INT '}'
		public Group getGroup() { return cGroup; }
		
		//'TrainingTest'
		public Keyword getTrainingTestKeyword_0() { return cTrainingTestKeyword_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//'pourcentageTraining'
		public Keyword getPourcentageTrainingKeyword_2() { return cPourcentageTrainingKeyword_2; }
		
		//number=INT
		public Assignment getNumberAssignment_3() { return cNumberAssignment_3; }
		
		//INT
		public RuleCall getNumberINTTerminalRuleCall_3_0() { return cNumberINTTerminalRuleCall_3_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class SVMElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl2.MML.SVM");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSVMKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cKernelSVMKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cTypeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cTypeSVMKernelEnumRuleCall_3_0 = (RuleCall)cTypeAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cTypeSVMKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cNameAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cNameSVMTypeEnumRuleCall_4_1_0 = (RuleCall)cNameAssignment_4_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//SVM:
		//	'SVM' '{'
		//	'kernelSVM' type=SVMKernel ('typeSVM' name=SVMType)?
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'SVM' '{' 'kernelSVM' type=SVMKernel ('typeSVM' name=SVMType)? '}'
		public Group getGroup() { return cGroup; }
		
		//'SVM'
		public Keyword getSVMKeyword_0() { return cSVMKeyword_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//'kernelSVM'
		public Keyword getKernelSVMKeyword_2() { return cKernelSVMKeyword_2; }
		
		//type=SVMKernel
		public Assignment getTypeAssignment_3() { return cTypeAssignment_3; }
		
		//SVMKernel
		public RuleCall getTypeSVMKernelEnumRuleCall_3_0() { return cTypeSVMKernelEnumRuleCall_3_0; }
		
		//('typeSVM' name=SVMType)?
		public Group getGroup_4() { return cGroup_4; }
		
		//'typeSVM'
		public Keyword getTypeSVMKeyword_4_0() { return cTypeSVMKeyword_4_0; }
		
		//name=SVMType
		public Assignment getNameAssignment_4_1() { return cNameAssignment_4_1; }
		
		//SVMType
		public RuleCall getNameSVMTypeEnumRuleCall_4_1_0() { return cNameSVMTypeEnumRuleCall_4_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}
	public class TreeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl2.MML.Tree");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTreeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cMethodTreeKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cTypeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cTypeTreetypeEnumRuleCall_3_0 = (RuleCall)cTypeAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Tree:
		//	'Tree' '{'
		//	'methodTree' type=Treetype
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'Tree' '{' 'methodTree' type=Treetype '}'
		public Group getGroup() { return cGroup; }
		
		//'Tree'
		public Keyword getTreeKeyword_0() { return cTreeKeyword_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//'methodTree'
		public Keyword getMethodTreeKeyword_2() { return cMethodTreeKeyword_2; }
		
		//type=Treetype
		public Assignment getTypeAssignment_3() { return cTypeAssignment_3; }
		
		//Treetype
		public RuleCall getTypeTreetypeEnumRuleCall_3_0() { return cTypeTreetypeEnumRuleCall_3_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	
	public class LangElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl2.MML.Lang");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cPythonEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cPythonPythonKeyword_0_0 = (Keyword)cPythonEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cREnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cRRKeyword_1_0 = (Keyword)cREnumLiteralDeclaration_1.eContents().get(0);
		
		//enum Lang: //remplacer par enum
		//	python="Python" | R;
		public EnumRule getRule() { return rule; }
		
		////remplacer par enum
		//python="Python" | R
		public Alternatives getAlternatives() { return cAlternatives; }
		
		////remplacer par enum
		//python="Python"
		public EnumLiteralDeclaration getPythonEnumLiteralDeclaration_0() { return cPythonEnumLiteralDeclaration_0; }
		
		//"Python"
		public Keyword getPythonPythonKeyword_0_0() { return cPythonPythonKeyword_0_0; }
		
		//R
		public EnumLiteralDeclaration getREnumLiteralDeclaration_1() { return cREnumLiteralDeclaration_1; }
		
		//"R"
		public Keyword getRRKeyword_1_0() { return cRRKeyword_1_0; }
	}
	public class SVMKernelElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl2.MML.SVMKernel");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cLinearEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cLinearLinearKeyword_0_0 = (Keyword)cLinearEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cPolyEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cPolyPolynomialKeyword_1_0 = (Keyword)cPolyEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cRadialEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cRadialRadialKeyword_2_0 = (Keyword)cRadialEnumLiteralDeclaration_2.eContents().get(0);
		
		//enum SVMKernel:
		//	linear | poly='polynomial' | radial;
		public EnumRule getRule() { return rule; }
		
		//linear | poly='polynomial' | radial
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//linear
		public EnumLiteralDeclaration getLinearEnumLiteralDeclaration_0() { return cLinearEnumLiteralDeclaration_0; }
		
		//'linear'
		public Keyword getLinearLinearKeyword_0_0() { return cLinearLinearKeyword_0_0; }
		
		//poly='polynomial'
		public EnumLiteralDeclaration getPolyEnumLiteralDeclaration_1() { return cPolyEnumLiteralDeclaration_1; }
		
		//'polynomial'
		public Keyword getPolyPolynomialKeyword_1_0() { return cPolyPolynomialKeyword_1_0; }
		
		//radial
		public EnumLiteralDeclaration getRadialEnumLiteralDeclaration_2() { return cRadialEnumLiteralDeclaration_2; }
		
		//'radial'
		public Keyword getRadialRadialKeyword_2_0() { return cRadialRadialKeyword_2_0; }
	}
	public class SVMTypeElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl2.MML.SVMType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cCClassEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cCClassCClassificationKeyword_0_0 = (Keyword)cCClassEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cNuClassEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cNuClassNuClassificationKeyword_1_0 = (Keyword)cNuClassEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cOneClassEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cOneClassOneClassificationKeyword_2_0 = (Keyword)cOneClassEnumLiteralDeclaration_2.eContents().get(0);
		
		//enum SVMType:
		//	cClass="C-classification" | nuClass="nu-classification" | oneClass="one-classification";
		public EnumRule getRule() { return rule; }
		
		//cClass="C-classification" | nuClass="nu-classification" | oneClass="one-classification"
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//cClass="C-classification"
		public EnumLiteralDeclaration getCClassEnumLiteralDeclaration_0() { return cCClassEnumLiteralDeclaration_0; }
		
		//"C-classification"
		public Keyword getCClassCClassificationKeyword_0_0() { return cCClassCClassificationKeyword_0_0; }
		
		//nuClass="nu-classification"
		public EnumLiteralDeclaration getNuClassEnumLiteralDeclaration_1() { return cNuClassEnumLiteralDeclaration_1; }
		
		//"nu-classification"
		public Keyword getNuClassNuClassificationKeyword_1_0() { return cNuClassNuClassificationKeyword_1_0; }
		
		//oneClass="one-classification"
		public EnumLiteralDeclaration getOneClassEnumLiteralDeclaration_2() { return cOneClassEnumLiteralDeclaration_2; }
		
		//"one-classification"
		public Keyword getOneClassOneClassificationKeyword_2_0() { return cOneClassOneClassificationKeyword_2_0; }
	}
	public class TreetypeElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl2.MML.Treetype");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cClassEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cClassClassKeyword_0_0 = (Keyword)cClassEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cAnovaEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cAnovaAnovaKeyword_1_0 = (Keyword)cAnovaEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum Treetype:
		//	class | anova;
		public EnumRule getRule() { return rule; }
		
		//class | anova
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//class
		public EnumLiteralDeclaration getClassEnumLiteralDeclaration_0() { return cClassEnumLiteralDeclaration_0; }
		
		//"class"
		public Keyword getClassClassKeyword_0_0() { return cClassClassKeyword_0_0; }
		
		//anova
		public EnumLiteralDeclaration getAnovaEnumLiteralDeclaration_1() { return cAnovaEnumLiteralDeclaration_1; }
		
		//"anova"
		public Keyword getAnovaAnovaKeyword_1_0() { return cAnovaAnovaKeyword_1_0; }
	}
	
	private final TraitementElements pTraitement;
	private final VariableElements pVariable;
	private final AlgorithmElements pAlgorithm;
	private final LangElements eLang;
	private final StratEvalElements pStratEval;
	private final CrossValidationElements pCrossValidation;
	private final TrainingTestElements pTrainingTest;
	private final SVMElements pSVM;
	private final SVMKernelElements eSVMKernel;
	private final SVMTypeElements eSVMType;
	private final TreeElements pTree;
	private final TreetypeElements eTreetype;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public MMLGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pTraitement = new TraitementElements();
		this.pVariable = new VariableElements();
		this.pAlgorithm = new AlgorithmElements();
		this.eLang = new LangElements();
		this.pStratEval = new StratEvalElements();
		this.pCrossValidation = new CrossValidationElements();
		this.pTrainingTest = new TrainingTestElements();
		this.pSVM = new SVMElements();
		this.eSVMKernel = new SVMKernelElements();
		this.eSVMType = new SVMTypeElements();
		this.pTree = new TreeElements();
		this.eTreetype = new TreetypeElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.xtext.example.mydsl2.MML".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Traitement:
	//	'file' chemin=STRING
	//	'evaluation' eval=StratEval
	//	'algorithm' algo=Algorithm ('varCible' name=Variable)? ('varPredictives' names+=Variable*)?;
	public TraitementElements getTraitementAccess() {
		return pTraitement;
	}
	
	public ParserRule getTraitementRule() {
		return getTraitementAccess().getRule();
	}
	
	//Variable:
	//	name=INT;
	public VariableElements getVariableAccess() {
		return pVariable;
	}
	
	public ParserRule getVariableRule() {
		return getVariableAccess().getRule();
	}
	
	//Algorithm:
	//	'{'
	//	'languageAlgo' lang=Lang
	//	'nameAlgo' name=(SVM | Tree)
	//	'}';
	public AlgorithmElements getAlgorithmAccess() {
		return pAlgorithm;
	}
	
	public ParserRule getAlgorithmRule() {
		return getAlgorithmAccess().getRule();
	}
	
	//enum Lang: //remplacer par enum
	//	python="Python" | R;
	public LangElements getLangAccess() {
		return eLang;
	}
	
	public EnumRule getLangRule() {
		return getLangAccess().getRule();
	}
	
	//StratEval:
	//	name=CrossValidation | TrainingTest;
	public StratEvalElements getStratEvalAccess() {
		return pStratEval;
	}
	
	public ParserRule getStratEvalRule() {
		return getStratEvalAccess().getRule();
	}
	
	//CrossValidation:
	//	'CrossValidation' '{'
	//	'numRepetitionCross' number=INT
	//	'}';
	public CrossValidationElements getCrossValidationAccess() {
		return pCrossValidation;
	}
	
	public ParserRule getCrossValidationRule() {
		return getCrossValidationAccess().getRule();
	}
	
	//TrainingTest:
	//	'TrainingTest' '{'
	//	'pourcentageTraining' number=INT
	//	'}';
	public TrainingTestElements getTrainingTestAccess() {
		return pTrainingTest;
	}
	
	public ParserRule getTrainingTestRule() {
		return getTrainingTestAccess().getRule();
	}
	
	//SVM:
	//	'SVM' '{'
	//	'kernelSVM' type=SVMKernel ('typeSVM' name=SVMType)?
	//	'}';
	public SVMElements getSVMAccess() {
		return pSVM;
	}
	
	public ParserRule getSVMRule() {
		return getSVMAccess().getRule();
	}
	
	//enum SVMKernel:
	//	linear | poly='polynomial' | radial;
	public SVMKernelElements getSVMKernelAccess() {
		return eSVMKernel;
	}
	
	public EnumRule getSVMKernelRule() {
		return getSVMKernelAccess().getRule();
	}
	
	//enum SVMType:
	//	cClass="C-classification" | nuClass="nu-classification" | oneClass="one-classification";
	public SVMTypeElements getSVMTypeAccess() {
		return eSVMType;
	}
	
	public EnumRule getSVMTypeRule() {
		return getSVMTypeAccess().getRule();
	}
	
	//Tree:
	//	'Tree' '{'
	//	'methodTree' type=Treetype
	//	'}';
	public TreeElements getTreeAccess() {
		return pTree;
	}
	
	public ParserRule getTreeRule() {
		return getTreeAccess().getRule();
	}
	
	//enum Treetype:
	//	class | anova;
	public TreetypeElements getTreetypeAccess() {
		return eTreetype;
	}
	
	public EnumRule getTreetypeRule() {
		return getTreetypeAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' |
	//	"'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
