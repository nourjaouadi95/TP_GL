/*
 * generated by Xtext 2.16.0
 */
grammar InternalMML;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package org.xtext.example.mydsl2.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.xtext.example.mydsl2.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.common.util.Enumerator;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.xtext.example.mydsl2.services.MMLGrammarAccess;

}

@parser::members {

 	private MMLGrammarAccess grammarAccess;

    public InternalMMLParser(TokenStream input, MMLGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "Traitement";
   	}

   	@Override
   	protected MMLGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleTraitement
entryRuleTraitement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTraitementRule()); }
	iv_ruleTraitement=ruleTraitement
	{ $current=$iv_ruleTraitement.current; }
	EOF;

// Rule Traitement
ruleTraitement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='file'
		{
			newLeafNode(otherlv_0, grammarAccess.getTraitementAccess().getFileKeyword_0());
		}
		(
			(
				lv_chemin_1_0=RULE_STRING
				{
					newLeafNode(lv_chemin_1_0, grammarAccess.getTraitementAccess().getCheminSTRINGTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getTraitementRule());
					}
					setWithLastConsumed(
						$current,
						"chemin",
						lv_chemin_1_0,
						"org.eclipse.xtext.common.Terminals.STRING");
				}
			)
		)
		otherlv_2='evaluation'
		{
			newLeafNode(otherlv_2, grammarAccess.getTraitementAccess().getEvaluationKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getTraitementAccess().getEvalStratEvalParserRuleCall_3_0());
				}
				lv_eval_3_0=ruleStratEval
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getTraitementRule());
					}
					set(
						$current,
						"eval",
						lv_eval_3_0,
						"org.xtext.example.mydsl2.MML.StratEval");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_4='algorithm'
		{
			newLeafNode(otherlv_4, grammarAccess.getTraitementAccess().getAlgorithmKeyword_4());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getTraitementAccess().getAlgoAlgorithmParserRuleCall_5_0());
				}
				lv_algo_5_0=ruleAlgorithm
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getTraitementRule());
					}
					set(
						$current,
						"algo",
						lv_algo_5_0,
						"org.xtext.example.mydsl2.MML.Algorithm");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_6='varCible'
			{
				newLeafNode(otherlv_6, grammarAccess.getTraitementAccess().getVarCibleKeyword_6_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getTraitementAccess().getNameVariableParserRuleCall_6_1_0());
					}
					lv_name_7_0=ruleVariable
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getTraitementRule());
						}
						set(
							$current,
							"name",
							lv_name_7_0,
							"org.xtext.example.mydsl2.MML.Variable");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
		(
			otherlv_8='varPredictives'
			{
				newLeafNode(otherlv_8, grammarAccess.getTraitementAccess().getVarPredictivesKeyword_7_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getTraitementAccess().getNamesVariableParserRuleCall_7_1_0());
					}
					lv_names_9_0=ruleVariable
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getTraitementRule());
						}
						add(
							$current,
							"names",
							lv_names_9_0,
							"org.xtext.example.mydsl2.MML.Variable");
						afterParserOrEnumRuleCall();
					}
				)
			)*
		)?
	)
;

// Entry rule entryRuleVariable
entryRuleVariable returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getVariableRule()); }
	iv_ruleVariable=ruleVariable
	{ $current=$iv_ruleVariable.current; }
	EOF;

// Rule Variable
ruleVariable returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			lv_name_0_0=RULE_INT
			{
				newLeafNode(lv_name_0_0, grammarAccess.getVariableAccess().getNameINTTerminalRuleCall_0());
			}
			{
				if ($current==null) {
					$current = createModelElement(grammarAccess.getVariableRule());
				}
				setWithLastConsumed(
					$current,
					"name",
					lv_name_0_0,
					"org.eclipse.xtext.common.Terminals.INT");
			}
		)
	)
;

// Entry rule entryRuleAlgorithm
entryRuleAlgorithm returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAlgorithmRule()); }
	iv_ruleAlgorithm=ruleAlgorithm
	{ $current=$iv_ruleAlgorithm.current; }
	EOF;

// Rule Algorithm
ruleAlgorithm returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='{'
		{
			newLeafNode(otherlv_0, grammarAccess.getAlgorithmAccess().getLeftCurlyBracketKeyword_0());
		}
		otherlv_1='languageAlgo'
		{
			newLeafNode(otherlv_1, grammarAccess.getAlgorithmAccess().getLanguageAlgoKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getAlgorithmAccess().getLangLangEnumRuleCall_2_0());
				}
				lv_lang_2_0=ruleLang
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getAlgorithmRule());
					}
					set(
						$current,
						"lang",
						lv_lang_2_0,
						"org.xtext.example.mydsl2.MML.Lang");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_3='nameAlgo'
		{
			newLeafNode(otherlv_3, grammarAccess.getAlgorithmAccess().getNameAlgoKeyword_3());
		}
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getAlgorithmAccess().getNameSVMParserRuleCall_4_0_0());
					}
					lv_name_4_1=ruleSVM
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getAlgorithmRule());
						}
						set(
							$current,
							"name",
							lv_name_4_1,
							"org.xtext.example.mydsl2.MML.SVM");
						afterParserOrEnumRuleCall();
					}
					    |
					{
						newCompositeNode(grammarAccess.getAlgorithmAccess().getNameTreeParserRuleCall_4_0_1());
					}
					lv_name_4_2=ruleTree
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getAlgorithmRule());
						}
						set(
							$current,
							"name",
							lv_name_4_2,
							"org.xtext.example.mydsl2.MML.Tree");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
		otherlv_5='}'
		{
			newLeafNode(otherlv_5, grammarAccess.getAlgorithmAccess().getRightCurlyBracketKeyword_5());
		}
	)
;

// Entry rule entryRuleStratEval
entryRuleStratEval returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getStratEvalRule()); }
	iv_ruleStratEval=ruleStratEval
	{ $current=$iv_ruleStratEval.current; }
	EOF;

// Rule StratEval
ruleStratEval returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getStratEvalAccess().getNameCrossValidationParserRuleCall_0_0());
				}
				lv_name_0_0=ruleCrossValidation
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getStratEvalRule());
					}
					set(
						$current,
						"name",
						lv_name_0_0,
						"org.xtext.example.mydsl2.MML.CrossValidation");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		{
			newCompositeNode(grammarAccess.getStratEvalAccess().getTrainingTestParserRuleCall_1());
		}
		this_TrainingTest_1=ruleTrainingTest
		{
			$current = $this_TrainingTest_1.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleCrossValidation
entryRuleCrossValidation returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getCrossValidationRule()); }
	iv_ruleCrossValidation=ruleCrossValidation
	{ $current=$iv_ruleCrossValidation.current; }
	EOF;

// Rule CrossValidation
ruleCrossValidation returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='CrossValidation'
		{
			newLeafNode(otherlv_0, grammarAccess.getCrossValidationAccess().getCrossValidationKeyword_0());
		}
		otherlv_1='{'
		{
			newLeafNode(otherlv_1, grammarAccess.getCrossValidationAccess().getLeftCurlyBracketKeyword_1());
		}
		otherlv_2='numRepetitionCross'
		{
			newLeafNode(otherlv_2, grammarAccess.getCrossValidationAccess().getNumRepetitionCrossKeyword_2());
		}
		(
			(
				lv_number_3_0=RULE_INT
				{
					newLeafNode(lv_number_3_0, grammarAccess.getCrossValidationAccess().getNumberINTTerminalRuleCall_3_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getCrossValidationRule());
					}
					setWithLastConsumed(
						$current,
						"number",
						lv_number_3_0,
						"org.eclipse.xtext.common.Terminals.INT");
				}
			)
		)
		otherlv_4='}'
		{
			newLeafNode(otherlv_4, grammarAccess.getCrossValidationAccess().getRightCurlyBracketKeyword_4());
		}
	)
;

// Entry rule entryRuleTrainingTest
entryRuleTrainingTest returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTrainingTestRule()); }
	iv_ruleTrainingTest=ruleTrainingTest
	{ $current=$iv_ruleTrainingTest.current; }
	EOF;

// Rule TrainingTest
ruleTrainingTest returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='TrainingTest'
		{
			newLeafNode(otherlv_0, grammarAccess.getTrainingTestAccess().getTrainingTestKeyword_0());
		}
		otherlv_1='{'
		{
			newLeafNode(otherlv_1, grammarAccess.getTrainingTestAccess().getLeftCurlyBracketKeyword_1());
		}
		otherlv_2='pourcentageTraining'
		{
			newLeafNode(otherlv_2, grammarAccess.getTrainingTestAccess().getPourcentageTrainingKeyword_2());
		}
		(
			(
				lv_number_3_0=RULE_INT
				{
					newLeafNode(lv_number_3_0, grammarAccess.getTrainingTestAccess().getNumberINTTerminalRuleCall_3_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getTrainingTestRule());
					}
					setWithLastConsumed(
						$current,
						"number",
						lv_number_3_0,
						"org.eclipse.xtext.common.Terminals.INT");
				}
			)
		)
		otherlv_4='}'
		{
			newLeafNode(otherlv_4, grammarAccess.getTrainingTestAccess().getRightCurlyBracketKeyword_4());
		}
	)
;

// Entry rule entryRuleSVM
entryRuleSVM returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSVMRule()); }
	iv_ruleSVM=ruleSVM
	{ $current=$iv_ruleSVM.current; }
	EOF;

// Rule SVM
ruleSVM returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='SVM'
		{
			newLeafNode(otherlv_0, grammarAccess.getSVMAccess().getSVMKeyword_0());
		}
		otherlv_1='{'
		{
			newLeafNode(otherlv_1, grammarAccess.getSVMAccess().getLeftCurlyBracketKeyword_1());
		}
		otherlv_2='kernelSVM'
		{
			newLeafNode(otherlv_2, grammarAccess.getSVMAccess().getKernelSVMKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getSVMAccess().getTypeSVMKernelEnumRuleCall_3_0());
				}
				lv_type_3_0=ruleSVMKernel
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSVMRule());
					}
					set(
						$current,
						"type",
						lv_type_3_0,
						"org.xtext.example.mydsl2.MML.SVMKernel");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_4='typeSVM'
			{
				newLeafNode(otherlv_4, grammarAccess.getSVMAccess().getTypeSVMKeyword_4_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getSVMAccess().getNameSVMTypeEnumRuleCall_4_1_0());
					}
					lv_name_5_0=ruleSVMType
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getSVMRule());
						}
						set(
							$current,
							"name",
							lv_name_5_0,
							"org.xtext.example.mydsl2.MML.SVMType");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
		otherlv_6='}'
		{
			newLeafNode(otherlv_6, grammarAccess.getSVMAccess().getRightCurlyBracketKeyword_5());
		}
	)
;

// Entry rule entryRuleTree
entryRuleTree returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTreeRule()); }
	iv_ruleTree=ruleTree
	{ $current=$iv_ruleTree.current; }
	EOF;

// Rule Tree
ruleTree returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='Tree'
		{
			newLeafNode(otherlv_0, grammarAccess.getTreeAccess().getTreeKeyword_0());
		}
		otherlv_1='{'
		{
			newLeafNode(otherlv_1, grammarAccess.getTreeAccess().getLeftCurlyBracketKeyword_1());
		}
		otherlv_2='methodTree'
		{
			newLeafNode(otherlv_2, grammarAccess.getTreeAccess().getMethodTreeKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getTreeAccess().getTypeTreetypeEnumRuleCall_3_0());
				}
				lv_type_3_0=ruleTreetype
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getTreeRule());
					}
					set(
						$current,
						"type",
						lv_type_3_0,
						"org.xtext.example.mydsl2.MML.Treetype");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_4='}'
		{
			newLeafNode(otherlv_4, grammarAccess.getTreeAccess().getRightCurlyBracketKeyword_4());
		}
	)
;

// Rule Lang
ruleLang returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0='Python'
			{
				$current = grammarAccess.getLangAccess().getPythonEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getLangAccess().getPythonEnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1='R'
			{
				$current = grammarAccess.getLangAccess().getREnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getLangAccess().getREnumLiteralDeclaration_1());
			}
		)
	)
;

// Rule SVMKernel
ruleSVMKernel returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0='linear'
			{
				$current = grammarAccess.getSVMKernelAccess().getLinearEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getSVMKernelAccess().getLinearEnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1='polynomial'
			{
				$current = grammarAccess.getSVMKernelAccess().getPolyEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getSVMKernelAccess().getPolyEnumLiteralDeclaration_1());
			}
		)
		    |
		(
			enumLiteral_2='radial'
			{
				$current = grammarAccess.getSVMKernelAccess().getRadialEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_2, grammarAccess.getSVMKernelAccess().getRadialEnumLiteralDeclaration_2());
			}
		)
	)
;

// Rule SVMType
ruleSVMType returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0='C-classification'
			{
				$current = grammarAccess.getSVMTypeAccess().getCClassEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getSVMTypeAccess().getCClassEnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1='nu-classification'
			{
				$current = grammarAccess.getSVMTypeAccess().getNuClassEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getSVMTypeAccess().getNuClassEnumLiteralDeclaration_1());
			}
		)
		    |
		(
			enumLiteral_2='one-classification'
			{
				$current = grammarAccess.getSVMTypeAccess().getOneClassEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_2, grammarAccess.getSVMTypeAccess().getOneClassEnumLiteralDeclaration_2());
			}
		)
	)
;

// Rule Treetype
ruleTreetype returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0='class'
			{
				$current = grammarAccess.getTreetypeAccess().getClassEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getTreetypeAccess().getClassEnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1='anova'
			{
				$current = grammarAccess.getTreetypeAccess().getAnovaEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getTreetypeAccess().getAnovaEnumLiteralDeclaration_1());
			}
		)
	)
;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
