/*
 * generated by Xtext 2.16.0
 */
grammar InternalMML;

options {
	superClass=AbstractInternalContentAssistParser;
}

@lexer::header {
package org.xtext.example.mydsl2.ide.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package org.xtext.example.mydsl2.ide.contentassist.antlr.internal;

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.DFA;
import org.xtext.example.mydsl2.services.MMLGrammarAccess;

}
@parser::members {
	private MMLGrammarAccess grammarAccess;

	public void setGrammarAccess(MMLGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}

	@Override
	protected Grammar getGrammar() {
		return grammarAccess.getGrammar();
	}

	@Override
	protected String getValueForTokenName(String tokenName) {
		return tokenName;
	}
}

// Entry rule entryRuleTraitement
entryRuleTraitement
:
{ before(grammarAccess.getTraitementRule()); }
	 ruleTraitement
{ after(grammarAccess.getTraitementRule()); } 
	 EOF 
;

// Rule Traitement
ruleTraitement 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getTraitementAccess().getGroup()); }
		(rule__Traitement__Group__0)
		{ after(grammarAccess.getTraitementAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleVariable
entryRuleVariable
:
{ before(grammarAccess.getVariableRule()); }
	 ruleVariable
{ after(grammarAccess.getVariableRule()); } 
	 EOF 
;

// Rule Variable
ruleVariable 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getVariableAccess().getNameAssignment()); }
		(rule__Variable__NameAssignment)
		{ after(grammarAccess.getVariableAccess().getNameAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleAlgorithm
entryRuleAlgorithm
:
{ before(grammarAccess.getAlgorithmRule()); }
	 ruleAlgorithm
{ after(grammarAccess.getAlgorithmRule()); } 
	 EOF 
;

// Rule Algorithm
ruleAlgorithm 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getAlgorithmAccess().getGroup()); }
		(rule__Algorithm__Group__0)
		{ after(grammarAccess.getAlgorithmAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleStratEval
entryRuleStratEval
:
{ before(grammarAccess.getStratEvalRule()); }
	 ruleStratEval
{ after(grammarAccess.getStratEvalRule()); } 
	 EOF 
;

// Rule StratEval
ruleStratEval 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getStratEvalAccess().getAlternatives()); }
		(rule__StratEval__Alternatives)
		{ after(grammarAccess.getStratEvalAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleCrossValidation
entryRuleCrossValidation
:
{ before(grammarAccess.getCrossValidationRule()); }
	 ruleCrossValidation
{ after(grammarAccess.getCrossValidationRule()); } 
	 EOF 
;

// Rule CrossValidation
ruleCrossValidation 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getCrossValidationAccess().getGroup()); }
		(rule__CrossValidation__Group__0)
		{ after(grammarAccess.getCrossValidationAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleTrainingTest
entryRuleTrainingTest
:
{ before(grammarAccess.getTrainingTestRule()); }
	 ruleTrainingTest
{ after(grammarAccess.getTrainingTestRule()); } 
	 EOF 
;

// Rule TrainingTest
ruleTrainingTest 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getTrainingTestAccess().getGroup()); }
		(rule__TrainingTest__Group__0)
		{ after(grammarAccess.getTrainingTestAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleSVM
entryRuleSVM
:
{ before(grammarAccess.getSVMRule()); }
	 ruleSVM
{ after(grammarAccess.getSVMRule()); } 
	 EOF 
;

// Rule SVM
ruleSVM 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getSVMAccess().getGroup()); }
		(rule__SVM__Group__0)
		{ after(grammarAccess.getSVMAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleTree
entryRuleTree
:
{ before(grammarAccess.getTreeRule()); }
	 ruleTree
{ after(grammarAccess.getTreeRule()); } 
	 EOF 
;

// Rule Tree
ruleTree 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getTreeAccess().getGroup()); }
		(rule__Tree__Group__0)
		{ after(grammarAccess.getTreeAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Rule Lang
ruleLang
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getLangAccess().getAlternatives()); }
		(rule__Lang__Alternatives)
		{ after(grammarAccess.getLangAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Rule SVMKernel
ruleSVMKernel
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSVMKernelAccess().getAlternatives()); }
		(rule__SVMKernel__Alternatives)
		{ after(grammarAccess.getSVMKernelAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Rule SVMType
ruleSVMType
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSVMTypeAccess().getAlternatives()); }
		(rule__SVMType__Alternatives)
		{ after(grammarAccess.getSVMTypeAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Rule Treetype
ruleTreetype
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTreetypeAccess().getAlternatives()); }
		(rule__Treetype__Alternatives)
		{ after(grammarAccess.getTreetypeAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Algorithm__NameAlternatives_4_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAlgorithmAccess().getNameSVMParserRuleCall_4_0_0()); }
		ruleSVM
		{ after(grammarAccess.getAlgorithmAccess().getNameSVMParserRuleCall_4_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getAlgorithmAccess().getNameTreeParserRuleCall_4_0_1()); }
		ruleTree
		{ after(grammarAccess.getAlgorithmAccess().getNameTreeParserRuleCall_4_0_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__StratEval__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getStratEvalAccess().getNameAssignment_0()); }
		(rule__StratEval__NameAssignment_0)
		{ after(grammarAccess.getStratEvalAccess().getNameAssignment_0()); }
	)
	|
	(
		{ before(grammarAccess.getStratEvalAccess().getTrainingTestParserRuleCall_1()); }
		ruleTrainingTest
		{ after(grammarAccess.getStratEvalAccess().getTrainingTestParserRuleCall_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Lang__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getLangAccess().getPythonEnumLiteralDeclaration_0()); }
		('Python')
		{ after(grammarAccess.getLangAccess().getPythonEnumLiteralDeclaration_0()); }
	)
	|
	(
		{ before(grammarAccess.getLangAccess().getREnumLiteralDeclaration_1()); }
		('R')
		{ after(grammarAccess.getLangAccess().getREnumLiteralDeclaration_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__SVMKernel__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSVMKernelAccess().getLinearEnumLiteralDeclaration_0()); }
		('linear')
		{ after(grammarAccess.getSVMKernelAccess().getLinearEnumLiteralDeclaration_0()); }
	)
	|
	(
		{ before(grammarAccess.getSVMKernelAccess().getPolyEnumLiteralDeclaration_1()); }
		('polynomial')
		{ after(grammarAccess.getSVMKernelAccess().getPolyEnumLiteralDeclaration_1()); }
	)
	|
	(
		{ before(grammarAccess.getSVMKernelAccess().getRadialEnumLiteralDeclaration_2()); }
		('radial')
		{ after(grammarAccess.getSVMKernelAccess().getRadialEnumLiteralDeclaration_2()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__SVMType__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSVMTypeAccess().getCClassEnumLiteralDeclaration_0()); }
		('C-classification')
		{ after(grammarAccess.getSVMTypeAccess().getCClassEnumLiteralDeclaration_0()); }
	)
	|
	(
		{ before(grammarAccess.getSVMTypeAccess().getNuClassEnumLiteralDeclaration_1()); }
		('nu-classification')
		{ after(grammarAccess.getSVMTypeAccess().getNuClassEnumLiteralDeclaration_1()); }
	)
	|
	(
		{ before(grammarAccess.getSVMTypeAccess().getOneClassEnumLiteralDeclaration_2()); }
		('one-classification')
		{ after(grammarAccess.getSVMTypeAccess().getOneClassEnumLiteralDeclaration_2()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Treetype__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTreetypeAccess().getClassEnumLiteralDeclaration_0()); }
		('class')
		{ after(grammarAccess.getTreetypeAccess().getClassEnumLiteralDeclaration_0()); }
	)
	|
	(
		{ before(grammarAccess.getTreetypeAccess().getAnovaEnumLiteralDeclaration_1()); }
		('anova')
		{ after(grammarAccess.getTreetypeAccess().getAnovaEnumLiteralDeclaration_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Traitement__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Traitement__Group__0__Impl
	rule__Traitement__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Traitement__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTraitementAccess().getFileKeyword_0()); }
	'file'
	{ after(grammarAccess.getTraitementAccess().getFileKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Traitement__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Traitement__Group__1__Impl
	rule__Traitement__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Traitement__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTraitementAccess().getCheminAssignment_1()); }
	(rule__Traitement__CheminAssignment_1)
	{ after(grammarAccess.getTraitementAccess().getCheminAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Traitement__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Traitement__Group__2__Impl
	rule__Traitement__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Traitement__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTraitementAccess().getEvaluationKeyword_2()); }
	'evaluation'
	{ after(grammarAccess.getTraitementAccess().getEvaluationKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Traitement__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Traitement__Group__3__Impl
	rule__Traitement__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Traitement__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTraitementAccess().getEvalAssignment_3()); }
	(rule__Traitement__EvalAssignment_3)
	{ after(grammarAccess.getTraitementAccess().getEvalAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Traitement__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Traitement__Group__4__Impl
	rule__Traitement__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__Traitement__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTraitementAccess().getAlgorithmKeyword_4()); }
	'algorithm'
	{ after(grammarAccess.getTraitementAccess().getAlgorithmKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Traitement__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Traitement__Group__5__Impl
	rule__Traitement__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__Traitement__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTraitementAccess().getAlgoAssignment_5()); }
	(rule__Traitement__AlgoAssignment_5)
	{ after(grammarAccess.getTraitementAccess().getAlgoAssignment_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Traitement__Group__6
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Traitement__Group__6__Impl
	rule__Traitement__Group__7
;
finally {
	restoreStackSize(stackSize);
}

rule__Traitement__Group__6__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTraitementAccess().getGroup_6()); }
	(rule__Traitement__Group_6__0)?
	{ after(grammarAccess.getTraitementAccess().getGroup_6()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Traitement__Group__7
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Traitement__Group__7__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Traitement__Group__7__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTraitementAccess().getGroup_7()); }
	(rule__Traitement__Group_7__0)?
	{ after(grammarAccess.getTraitementAccess().getGroup_7()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Traitement__Group_6__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Traitement__Group_6__0__Impl
	rule__Traitement__Group_6__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Traitement__Group_6__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTraitementAccess().getVarCibleKeyword_6_0()); }
	'varCible'
	{ after(grammarAccess.getTraitementAccess().getVarCibleKeyword_6_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Traitement__Group_6__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Traitement__Group_6__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Traitement__Group_6__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTraitementAccess().getNameAssignment_6_1()); }
	(rule__Traitement__NameAssignment_6_1)
	{ after(grammarAccess.getTraitementAccess().getNameAssignment_6_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Traitement__Group_7__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Traitement__Group_7__0__Impl
	rule__Traitement__Group_7__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Traitement__Group_7__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTraitementAccess().getVarPredictivesKeyword_7_0()); }
	'varPredictives'
	{ after(grammarAccess.getTraitementAccess().getVarPredictivesKeyword_7_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Traitement__Group_7__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Traitement__Group_7__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Traitement__Group_7__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTraitementAccess().getNamesAssignment_7_1()); }
	(rule__Traitement__NamesAssignment_7_1)*
	{ after(grammarAccess.getTraitementAccess().getNamesAssignment_7_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Algorithm__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Algorithm__Group__0__Impl
	rule__Algorithm__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Algorithm__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAlgorithmAccess().getLeftCurlyBracketKeyword_0()); }
	'{'
	{ after(grammarAccess.getAlgorithmAccess().getLeftCurlyBracketKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Algorithm__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Algorithm__Group__1__Impl
	rule__Algorithm__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Algorithm__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAlgorithmAccess().getLanguageAlgoKeyword_1()); }
	'languageAlgo'
	{ after(grammarAccess.getAlgorithmAccess().getLanguageAlgoKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Algorithm__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Algorithm__Group__2__Impl
	rule__Algorithm__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Algorithm__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAlgorithmAccess().getLangAssignment_2()); }
	(rule__Algorithm__LangAssignment_2)
	{ after(grammarAccess.getAlgorithmAccess().getLangAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Algorithm__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Algorithm__Group__3__Impl
	rule__Algorithm__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Algorithm__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAlgorithmAccess().getNameAlgoKeyword_3()); }
	'nameAlgo'
	{ after(grammarAccess.getAlgorithmAccess().getNameAlgoKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Algorithm__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Algorithm__Group__4__Impl
	rule__Algorithm__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__Algorithm__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAlgorithmAccess().getNameAssignment_4()); }
	(rule__Algorithm__NameAssignment_4)
	{ after(grammarAccess.getAlgorithmAccess().getNameAssignment_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Algorithm__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Algorithm__Group__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Algorithm__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAlgorithmAccess().getRightCurlyBracketKeyword_5()); }
	'}'
	{ after(grammarAccess.getAlgorithmAccess().getRightCurlyBracketKeyword_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__CrossValidation__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__CrossValidation__Group__0__Impl
	rule__CrossValidation__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__CrossValidation__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCrossValidationAccess().getCrossValidationKeyword_0()); }
	'CrossValidation'
	{ after(grammarAccess.getCrossValidationAccess().getCrossValidationKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__CrossValidation__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__CrossValidation__Group__1__Impl
	rule__CrossValidation__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__CrossValidation__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCrossValidationAccess().getLeftCurlyBracketKeyword_1()); }
	'{'
	{ after(grammarAccess.getCrossValidationAccess().getLeftCurlyBracketKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__CrossValidation__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__CrossValidation__Group__2__Impl
	rule__CrossValidation__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__CrossValidation__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCrossValidationAccess().getNumRepetitionCrossKeyword_2()); }
	'numRepetitionCross'
	{ after(grammarAccess.getCrossValidationAccess().getNumRepetitionCrossKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__CrossValidation__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__CrossValidation__Group__3__Impl
	rule__CrossValidation__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__CrossValidation__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCrossValidationAccess().getNumberAssignment_3()); }
	(rule__CrossValidation__NumberAssignment_3)
	{ after(grammarAccess.getCrossValidationAccess().getNumberAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__CrossValidation__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__CrossValidation__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__CrossValidation__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCrossValidationAccess().getRightCurlyBracketKeyword_4()); }
	'}'
	{ after(grammarAccess.getCrossValidationAccess().getRightCurlyBracketKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__TrainingTest__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TrainingTest__Group__0__Impl
	rule__TrainingTest__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__TrainingTest__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTrainingTestAccess().getTrainingTestKeyword_0()); }
	'TrainingTest'
	{ after(grammarAccess.getTrainingTestAccess().getTrainingTestKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__TrainingTest__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TrainingTest__Group__1__Impl
	rule__TrainingTest__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__TrainingTest__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTrainingTestAccess().getLeftCurlyBracketKeyword_1()); }
	'{'
	{ after(grammarAccess.getTrainingTestAccess().getLeftCurlyBracketKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__TrainingTest__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TrainingTest__Group__2__Impl
	rule__TrainingTest__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__TrainingTest__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTrainingTestAccess().getPourcentageTrainingKeyword_2()); }
	'pourcentageTraining'
	{ after(grammarAccess.getTrainingTestAccess().getPourcentageTrainingKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__TrainingTest__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TrainingTest__Group__3__Impl
	rule__TrainingTest__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__TrainingTest__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTrainingTestAccess().getNumberAssignment_3()); }
	(rule__TrainingTest__NumberAssignment_3)
	{ after(grammarAccess.getTrainingTestAccess().getNumberAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__TrainingTest__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TrainingTest__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__TrainingTest__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTrainingTestAccess().getRightCurlyBracketKeyword_4()); }
	'}'
	{ after(grammarAccess.getTrainingTestAccess().getRightCurlyBracketKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__SVM__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SVM__Group__0__Impl
	rule__SVM__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SVM__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSVMAccess().getSVMKeyword_0()); }
	'SVM'
	{ after(grammarAccess.getSVMAccess().getSVMKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SVM__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SVM__Group__1__Impl
	rule__SVM__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__SVM__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSVMAccess().getLeftCurlyBracketKeyword_1()); }
	'{'
	{ after(grammarAccess.getSVMAccess().getLeftCurlyBracketKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SVM__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SVM__Group__2__Impl
	rule__SVM__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__SVM__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSVMAccess().getKernelSVMKeyword_2()); }
	'kernelSVM'
	{ after(grammarAccess.getSVMAccess().getKernelSVMKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SVM__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SVM__Group__3__Impl
	rule__SVM__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__SVM__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSVMAccess().getTypeAssignment_3()); }
	(rule__SVM__TypeAssignment_3)
	{ after(grammarAccess.getSVMAccess().getTypeAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SVM__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SVM__Group__4__Impl
	rule__SVM__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__SVM__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSVMAccess().getGroup_4()); }
	(rule__SVM__Group_4__0)?
	{ after(grammarAccess.getSVMAccess().getGroup_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SVM__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SVM__Group__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SVM__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSVMAccess().getRightCurlyBracketKeyword_5()); }
	'}'
	{ after(grammarAccess.getSVMAccess().getRightCurlyBracketKeyword_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__SVM__Group_4__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SVM__Group_4__0__Impl
	rule__SVM__Group_4__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SVM__Group_4__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSVMAccess().getTypeSVMKeyword_4_0()); }
	'typeSVM'
	{ after(grammarAccess.getSVMAccess().getTypeSVMKeyword_4_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SVM__Group_4__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SVM__Group_4__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SVM__Group_4__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSVMAccess().getNameAssignment_4_1()); }
	(rule__SVM__NameAssignment_4_1)
	{ after(grammarAccess.getSVMAccess().getNameAssignment_4_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Tree__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Tree__Group__0__Impl
	rule__Tree__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Tree__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTreeAccess().getTreeKeyword_0()); }
	'Tree'
	{ after(grammarAccess.getTreeAccess().getTreeKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Tree__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Tree__Group__1__Impl
	rule__Tree__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Tree__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTreeAccess().getLeftCurlyBracketKeyword_1()); }
	'{'
	{ after(grammarAccess.getTreeAccess().getLeftCurlyBracketKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Tree__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Tree__Group__2__Impl
	rule__Tree__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Tree__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTreeAccess().getMethodTreeKeyword_2()); }
	'methodTree'
	{ after(grammarAccess.getTreeAccess().getMethodTreeKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Tree__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Tree__Group__3__Impl
	rule__Tree__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Tree__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTreeAccess().getTypeAssignment_3()); }
	(rule__Tree__TypeAssignment_3)
	{ after(grammarAccess.getTreeAccess().getTypeAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Tree__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Tree__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Tree__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTreeAccess().getRightCurlyBracketKeyword_4()); }
	'}'
	{ after(grammarAccess.getTreeAccess().getRightCurlyBracketKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Traitement__CheminAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTraitementAccess().getCheminSTRINGTerminalRuleCall_1_0()); }
		RULE_STRING
		{ after(grammarAccess.getTraitementAccess().getCheminSTRINGTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Traitement__EvalAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTraitementAccess().getEvalStratEvalParserRuleCall_3_0()); }
		ruleStratEval
		{ after(grammarAccess.getTraitementAccess().getEvalStratEvalParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Traitement__AlgoAssignment_5
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTraitementAccess().getAlgoAlgorithmParserRuleCall_5_0()); }
		ruleAlgorithm
		{ after(grammarAccess.getTraitementAccess().getAlgoAlgorithmParserRuleCall_5_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Traitement__NameAssignment_6_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTraitementAccess().getNameVariableParserRuleCall_6_1_0()); }
		ruleVariable
		{ after(grammarAccess.getTraitementAccess().getNameVariableParserRuleCall_6_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Traitement__NamesAssignment_7_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTraitementAccess().getNamesVariableParserRuleCall_7_1_0()); }
		ruleVariable
		{ after(grammarAccess.getTraitementAccess().getNamesVariableParserRuleCall_7_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Variable__NameAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getVariableAccess().getNameINTTerminalRuleCall_0()); }
		RULE_INT
		{ after(grammarAccess.getVariableAccess().getNameINTTerminalRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Algorithm__LangAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAlgorithmAccess().getLangLangEnumRuleCall_2_0()); }
		ruleLang
		{ after(grammarAccess.getAlgorithmAccess().getLangLangEnumRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Algorithm__NameAssignment_4
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAlgorithmAccess().getNameAlternatives_4_0()); }
		(rule__Algorithm__NameAlternatives_4_0)
		{ after(grammarAccess.getAlgorithmAccess().getNameAlternatives_4_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__StratEval__NameAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getStratEvalAccess().getNameCrossValidationParserRuleCall_0_0()); }
		ruleCrossValidation
		{ after(grammarAccess.getStratEvalAccess().getNameCrossValidationParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__CrossValidation__NumberAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCrossValidationAccess().getNumberINTTerminalRuleCall_3_0()); }
		RULE_INT
		{ after(grammarAccess.getCrossValidationAccess().getNumberINTTerminalRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__TrainingTest__NumberAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTrainingTestAccess().getNumberINTTerminalRuleCall_3_0()); }
		RULE_INT
		{ after(grammarAccess.getTrainingTestAccess().getNumberINTTerminalRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__SVM__TypeAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSVMAccess().getTypeSVMKernelEnumRuleCall_3_0()); }
		ruleSVMKernel
		{ after(grammarAccess.getSVMAccess().getTypeSVMKernelEnumRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__SVM__NameAssignment_4_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSVMAccess().getNameSVMTypeEnumRuleCall_4_1_0()); }
		ruleSVMType
		{ after(grammarAccess.getSVMAccess().getNameSVMTypeEnumRuleCall_4_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Tree__TypeAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTreeAccess().getTypeTreetypeEnumRuleCall_3_0()); }
		ruleTreetype
		{ after(grammarAccess.getTreeAccess().getTypeTreetypeEnumRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
