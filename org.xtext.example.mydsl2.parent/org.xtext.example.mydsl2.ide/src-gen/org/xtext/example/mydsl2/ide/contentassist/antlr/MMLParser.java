/*
 * generated by Xtext 2.16.0
 */
package org.xtext.example.mydsl2.ide.contentassist.antlr;

import com.google.common.collect.ImmutableMap;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;
import org.xtext.example.mydsl2.ide.contentassist.antlr.internal.InternalMMLParser;
import org.xtext.example.mydsl2.services.MMLGrammarAccess;

public class MMLParser extends AbstractContentAssistParser {

	@Singleton
	public static final class NameMappings {
		
		private final Map<AbstractElement, String> mappings;
		
		@Inject
		public NameMappings(MMLGrammarAccess grammarAccess) {
			ImmutableMap.Builder<AbstractElement, String> builder = ImmutableMap.builder();
			init(builder, grammarAccess);
			this.mappings = builder.build();
		}
		
		public String getRuleName(AbstractElement element) {
			return mappings.get(element);
		}
		
		private static void init(ImmutableMap.Builder<AbstractElement, String> builder, MMLGrammarAccess grammarAccess) {
			builder.put(grammarAccess.getAlgorithmAccess().getNameAlternatives_4_0(), "rule__Algorithm__NameAlternatives_4_0");
			builder.put(grammarAccess.getStratEvalAccess().getAlternatives(), "rule__StratEval__Alternatives");
			builder.put(grammarAccess.getLangAccess().getAlternatives(), "rule__Lang__Alternatives");
			builder.put(grammarAccess.getSVMKernelAccess().getAlternatives(), "rule__SVMKernel__Alternatives");
			builder.put(grammarAccess.getSVMTypeAccess().getAlternatives(), "rule__SVMType__Alternatives");
			builder.put(grammarAccess.getTreetypeAccess().getAlternatives(), "rule__Treetype__Alternatives");
			builder.put(grammarAccess.getTraitementAccess().getGroup(), "rule__Traitement__Group__0");
			builder.put(grammarAccess.getTraitementAccess().getGroup_6(), "rule__Traitement__Group_6__0");
			builder.put(grammarAccess.getTraitementAccess().getGroup_7(), "rule__Traitement__Group_7__0");
			builder.put(grammarAccess.getAlgorithmAccess().getGroup(), "rule__Algorithm__Group__0");
			builder.put(grammarAccess.getCrossValidationAccess().getGroup(), "rule__CrossValidation__Group__0");
			builder.put(grammarAccess.getTrainingTestAccess().getGroup(), "rule__TrainingTest__Group__0");
			builder.put(grammarAccess.getSVMAccess().getGroup(), "rule__SVM__Group__0");
			builder.put(grammarAccess.getSVMAccess().getGroup_4(), "rule__SVM__Group_4__0");
			builder.put(grammarAccess.getTreeAccess().getGroup(), "rule__Tree__Group__0");
			builder.put(grammarAccess.getTraitementAccess().getCheminAssignment_1(), "rule__Traitement__CheminAssignment_1");
			builder.put(grammarAccess.getTraitementAccess().getEvalAssignment_3(), "rule__Traitement__EvalAssignment_3");
			builder.put(grammarAccess.getTraitementAccess().getAlgoAssignment_5(), "rule__Traitement__AlgoAssignment_5");
			builder.put(grammarAccess.getTraitementAccess().getNameAssignment_6_1(), "rule__Traitement__NameAssignment_6_1");
			builder.put(grammarAccess.getTraitementAccess().getNamesAssignment_7_1(), "rule__Traitement__NamesAssignment_7_1");
			builder.put(grammarAccess.getVariableAccess().getNameAssignment(), "rule__Variable__NameAssignment");
			builder.put(grammarAccess.getAlgorithmAccess().getLangAssignment_2(), "rule__Algorithm__LangAssignment_2");
			builder.put(grammarAccess.getAlgorithmAccess().getNameAssignment_4(), "rule__Algorithm__NameAssignment_4");
			builder.put(grammarAccess.getStratEvalAccess().getNameAssignment_0(), "rule__StratEval__NameAssignment_0");
			builder.put(grammarAccess.getCrossValidationAccess().getNumberAssignment_3(), "rule__CrossValidation__NumberAssignment_3");
			builder.put(grammarAccess.getTrainingTestAccess().getNumberAssignment_3(), "rule__TrainingTest__NumberAssignment_3");
			builder.put(grammarAccess.getSVMAccess().getTypeAssignment_3(), "rule__SVM__TypeAssignment_3");
			builder.put(grammarAccess.getSVMAccess().getNameAssignment_4_1(), "rule__SVM__NameAssignment_4_1");
			builder.put(grammarAccess.getTreeAccess().getTypeAssignment_3(), "rule__Tree__TypeAssignment_3");
		}
	}
	
	@Inject
	private NameMappings nameMappings;

	@Inject
	private MMLGrammarAccess grammarAccess;

	@Override
	protected InternalMMLParser createParser() {
		InternalMMLParser result = new InternalMMLParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		return nameMappings.getRuleName(element);
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public MMLGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(MMLGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
	
	public NameMappings getNameMappings() {
		return nameMappings;
	}
	
	public void setNameMappings(NameMappings nameMappings) {
		this.nameMappings = nameMappings;
	}
}
